{"version":3,"sources":["components/tile/tile.module.css","components/spymasterButton/spymasterButton.module.css","components/scorecard/scorecard.module.css","components/gameform/gameform.module.css","components/tile/tile.js","components/spymasterButton/spymasterButton.js","components/scorecard/scorecard.js","components/gameform/gameform.js","services/randomWordGenerator.js","services/gameLoader.js","components/board/board.js","App.js","serviceWorker.js","index.js","components/board/board.module.css"],"names":["module","exports","Tile","props","state","lastColor","undefined","colorShown","toggleColor","bind","newProps","spymasterSelected","this","setState","color","sendColorChangeToBoard","trackClick","className","styles","tile","style","backgroundColor","onClick","word","React","Component","SpymasterButton","clicked","hovering","buttonClickedColorChange","buttonHoverColorChange","button","getBackgroundColor","getTextColor","onMouseOver","onMouseLeave","buttonText","text","Scorecard","scorecard","scorecardText","tilesRemaining","GameForm","value","handleChange","refreshBoard","event","test","target","console","log","handleGameIdChange","startingWord","type","input","placeholder","maxLength","onChange","superagent","require","getWords","a","words","get","set","response","body","nouns","verbs","adjectives","calcHashCode","str","split","reduce","b","charCodeAt","getWordsAtHashedIndexes","hashCode","wordList","wordListAtHashedIndexes","wordListCopy","Array","from","i","intFromBits","parseInt","intFromCircularBits","length","circularBitsLost","circularBitStr","j","concat","bitsAsInt","wordIndex","Math","abs","push","splice","getColorsAtHashedIndexes","colorList","blueFirst","createColorList","colorListAtHashedIndexes","colorIndex","generateBoardSetup","gameId","providedWordList","randomWords","hashedWord","colors","Board","colorCounter","loading","setColorCounters","showAllColors","updateScore","updateBoard","setLoading","boardSetup","newColorCounts","Object","assign","callback","args","newId","masterWordList","blueCount","total","currentColor","redCount","indexCounter","board","boardHeader","id","CircularProgress","boardTiles","tileRow","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7754a027.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"tile_tile__2O8iQ\",\"word\":\"tile_word__2ydKx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"spymasterButton_button__2AjQb\",\"buttonText\":\"spymasterButton_buttonText__1887W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scorecard\":\"scorecard_scorecard__3r-JK\",\"scorecardText\":\"scorecard_scorecardText__3C8Ga\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"gameform_input__qpxww\"};","import React from 'react';\nimport styles from './tile.module.css';\n\nexport class Tile extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastColor: undefined,\n            colorShown: 'white'\n        }\n        this.toggleColor = this.toggleColor.bind(this);\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.spymasterSelected !== this.props.spymasterSelected) {\n            if (newProps.spymasterSelected === true) {\n                this.setState({\n                    lastColor: 'white',\n                    colorShown: this.props.color\n                });\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: 'white'\n                });\n            }\n        }\n    }\n\n    toggleColor() {\n        if(this.props.spymasterSelected) {\n            if(this.state.colorShown === 'white') {\n                this.setState({\n                    lastColor: 'white',\n                    colorShown: this.props.color\n                }, this.sendColorChangeToBoard);\n            } else if (this.state.colorShown === '#52AB6E') {\n                this.setState({\n                    lastColor: '#52AB6E',\n                    colorShown: 'white'\n                }, this.sendColorChangeToBoard);\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: '#52AB6E'\n                }, this.sendColorChangeToBoard);\n            }\n        } else {\n            if(this.state.colorShown === 'white') {\n                this.setState({\n                    lastColor: 'white',\n                    colorShown: this.props.color\n                }, this.sendColorChangeToBoard);\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: 'white'\n                }, this.sendColorChangeToBoard);\n            }\n        }\n    }\n\n    sendColorChangeToBoard() {\n        if (!this.props.spymasterSelected) {\n            this.props.trackClick(this.state.lastColor, this.state.colorShown);\n        }\n    }\n\n    render() {\n        return(\n            <div className={styles.tile} style={{backgroundColor: this.state.colorShown }} onClick={() => this.toggleColor()}>\n                <div className={styles.word}>\n                    {this.props.word}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './spymasterButton.module.css';\n\nexport class SpymasterButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            clicked: false,\n            hovering: false\n        }\n        this.buttonClickedColorChange = this.buttonClickedColorChange.bind(this);\n        this.buttonHoverColorChange = this.buttonHoverColorChange.bind(this);\n    }\n\n    buttonClickedColorChange() {\n        this.setState({\n            clicked: !this.state.clicked\n        })\n    }\n\n    buttonHoverColorChange() {\n        this.setState({\n            hovering: !this.state.hovering\n        })\n    }\n\n    getBackgroundColor() {\n        return this.state.clicked === true ? '#4f7567' : this.state.hovering ? 'grey' : 'white';\n    }\n\n    getTextColor() {\n        return (this.state.clicked === true || this.state.hovering === true) ? 'white' : 'black';\n    }\n\n    render() {\n        return(\n            <div className={styles.button} style={{backgroundColor: this.getBackgroundColor(), color: this.getTextColor()}} onClick={() => { this.props.onClick(); this.buttonClickedColorChange(); }} onMouseOver={() => this.buttonHoverColorChange()} onMouseLeave={() => this.buttonHoverColorChange()}>\n                <div className={styles.buttonText}>\n                    {this.props.text}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './scorecard.module.css';\n\nexport class Scorecard extends React.Component {\n\n    render() {\n        return(\n            <div className={styles.scorecard} style={{backgroundColor: this.props.color}}>\n                <div className={styles.scorecardText}>\n                    {this.props.tilesRemaining}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './gameform.module.css';\n\nexport class GameForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.refreshBoard = this.refreshBoard.bind(this);\n    }\n\n    handleChange(event) {\n        if (/^[a-zA-Z]+$/.test(event.target.value) === true || event.target.value === '') {\n            this.setState({\n                value: event.target.value\n            }, this.refreshBoard);\n        }\n    }\n\n    refreshBoard() {\n        console.log(`Refreshing board, current value: ${this.state.value}`);\n        if (this.state.value === '') {\n            this.props.handleGameIdChange(this.props.startingWord);\n        } else {\n            this.props.handleGameIdChange(this.state.value)\n        }\n    }\n\n    render() {\n        return(\n            <div>            \n                <form>\n                    <input type=\"text\" className={styles.input} placeholder={this.props.startingWord} maxLength=\"15\" onChange={this.handleChange} value={this.state.value}/>\n                </form>\n            </div>\n        )\n    }\n}","const superagent = require('superagent');\n\nexport async function getWords() {\n\n    let words = [];\n\n    const response = await superagent\n        .get(\"https://scpnmwczha.execute-api.us-east-1.amazonaws.com/dev/words\")\n        .set(\"Content-Type\", \"application/json\")\n        .set(\"Accept\", \"application/json\")\n\n    const { nouns, verbs, adjectives } = response.body\n    words = [...nouns, ...verbs, ...adjectives]\n\n    return words;\n}","import { getWords } from './randomWordGenerator';\nimport randomWords from 'random-words'\n\nexport function calcHashCode(str) {\n    return str.split(\"\").reduce((a, b) => {\n        a = ((a << 5) - a) + b.charCodeAt(0);\n        return a & a\n    }, 0);\n}\n\nexport function getWordsAtHashedIndexes(hashCode, wordList) {\n    const wordListAtHashedIndexes = [];\n    const fourteenBitStr = '11111111111111'\n    const bitsInInt = 32;\n    const wordListCopy = Array.from(wordList);\n\n    for(let i = 0; i < 25; i++) {\n        const intFromBits = parseInt(fourteenBitStr, 2) << i;\n        let intFromCircularBits = 0;\n        if (bitsInInt < fourteenBitStr.length + i) {\n            const circularBitsLost = fourteenBitStr.length + i - bitsInInt;\n            let circularBitStr = '';\n            for(let j = 0; j < circularBitsLost; j++) {\n                circularBitStr = circularBitStr.concat('1');\n            }\n            intFromCircularBits = parseInt(circularBitStr, 2);\n        }\n        const bitsAsInt = intFromBits + intFromCircularBits;\n        const wordIndex = Math.abs(hashCode & bitsAsInt) % wordListCopy.length;\n        wordListAtHashedIndexes.push(wordListCopy[wordIndex]);\n        wordListCopy.splice(wordIndex, 1);\n    }\n\n    return wordListAtHashedIndexes;\n}\n\nexport function getColorsAtHashedIndexes(hashCode) {\n    const colorList = createColorList(hashCode % 2 === 1);\n    const colorListAtHashedIndexes = [];\n    const fiveBitStr = '11111'\n\n    for(let i = 0; i < 25; i++) {\n        const intFromBits = parseInt(fiveBitStr, 2) << i;\n        const colorIndex = Math.abs(hashCode & intFromBits) % colorList.length;\n        colorListAtHashedIndexes.push(colorList[colorIndex])\n        colorList.splice(colorIndex, 1);\n    }\n\n    return colorListAtHashedIndexes\n}\n\nexport async function generateBoardSetup(gameId, providedWordList) {\n    let wordList = providedWordList;\n    if (providedWordList === undefined) {\n        wordList = await getWords();\n    }\n\n    let startingWord = gameId;\n    if (startingWord === undefined || startingWord === '') {\n        startingWord = randomWords();\n    }\n    const hashedWord = calcHashCode(startingWord);\n    return {\n        gameId: startingWord,\n        words: getWordsAtHashedIndexes(hashedWord, wordList),\n        colors: getColorsAtHashedIndexes(hashedWord)\n    };\n}\n\nexport function createColorList(blueFirst) {\n    let colorList = ['grey'];\n    for (let i = 0; i < 7; i++) {\n        colorList.push('#E8E889');\n    }\n    for (let i = 0; i < 8; i++) {\n        colorList.push('#83B1DE');\n        colorList.push('#F37472');\n    }\n    colorList.push(blueFirst ? '#83B1DE' : '#F37472');\n    return colorList;\n}","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Tile } from '../tile/tile';\nimport { SpymasterButton } from '../spymasterButton/spymasterButton';\nimport styles from './board.module.css';\nimport { Scorecard } from '../scorecard/scorecard';\nimport { GameForm } from '../gameform/gameform';\nimport { generateBoardSetup } from '../../services/gameLoader';\n\nexport class Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            spymasterSelected: false,\n            colorCounter: {\n                'white': 25,\n                '#83B1DE': 0,\n                '#F37472': 0,\n                '#52AB6E': 0,\n                'E8E889': 0\n            },\n            loading: true\n        };\n        this.setColorCounters = this.setColorCounters.bind(this);\n        this.showAllColors = this.showAllColors.bind(this);\n        this.updateScore = this.updateScore.bind(this);\n        this.updateBoard = this.updateBoard.bind(this);\n        this.setLoading = this.setLoading.bind(this);\n    }\n\n    async componentWillMount() {\n        const boardSetup = await generateBoardSetup();\n        this.setState({\n            wordList: boardSetup.words,\n            colorList: boardSetup.colors,\n            gameId: boardSetup.gameId,\n        });\n        this.startingWord = boardSetup.gameId;\n        this.setColorCounters();\n        this.setState({\n            loading: false\n        })\n    }\n\n    showAllColors() {\n        this.setState({\n            spymasterSelected: !this.state.spymasterSelected,\n            colorCounter: {\n                'white': 25,\n                '#83B1DE': 0,\n                '#F37472': 0,\n                '#52AB6E': 0,\n                'E8E889': 0\n            }\n        })\n    }\n\n    updateScore(lastColor, colorShown) {\n        let newColorCounts = {};\n        Object.assign(newColorCounts, this.state.colorCounter);\n        if (lastColor !== undefined) {\n            newColorCounts[lastColor]--;\n        } else {\n            newColorCounts['white']--;\n        }\n        newColorCounts[colorShown]++;\n\n        this.setState({\n            colorCounter: newColorCounts\n        });\n    }\n\n    async setLoading(callback, args) {\n        await this.setState({\n            loading: true\n        });\n        callback(args);\n        this.setState({\n            loading: false\n        })\n    }\n\n    async updateBoard(newId) {\n        const boardSetup = await generateBoardSetup(newId, this.props.masterWordList);\n        this.setState({\n            wordList: boardSetup.words,\n            colorList: boardSetup.colors,\n            gameId: newId,\n            spymasterSelected: false\n        }, this.setColorCounters);\n    }\n\n    setColorCounters() {\n        this.blueCount = this.state.colorList.reduce((total, currentColor) => {\n            if (currentColor === '#83B1DE') {\n                return total + 1;\n            }\n            return total;\n        }, 0);\n        this.redCount = 17 - this.blueCount;\n    }\n\n    render() {\n        let indexCounter = 0;\n\n        const renderScoreboard = () => {\n            if (this.state.spymasterSelected === true || this.state.loading) {\n                return (\n                <div>\n                    <Scorecard id='blueScorecard' color='#83B1DE' tilesRemaining={0}/>\n                    <Scorecard id='redScorecard' color='#F37472' tilesRemaining={0}/>\n                </div>\n            )\n            }\n            return (\n                <div>\n                    <Scorecard id='blueScorecard' color='#83B1DE' tilesRemaining={this.blueCount - this.state.colorCounter['#83B1DE']}/>\n                    <Scorecard id='redScorecard' color='#F37472' tilesRemaining={this.redCount - this.state.colorCounter['#F37472']}/>\n                </div>\n            )\n        }\n\n        const renderGametiles = () => {\n            if (this.state.loading === true) {\n                return <CircularProgress />\n            }\n            return (\n                    <div className={styles.boardTiles}>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                    </div>\n            )\n        }\n\n        return (\n            <div>\n                <div className={styles.board}>\n                    <div className={styles.boardHeader}>\n                        {\n                            renderScoreboard()\n                        }\n                        <GameForm startingWord={this.startingWord} handleGameIdChange={(newId) => this.setLoading(this.updateBoard, newId)}/>\n                        <SpymasterButton onClick={() => this.showAllColors()} text='SpyMaster'/>\n                    </div>\n                </div>\n                <div>\n                    {\n                        renderGametiles()\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Board } from './components/board/board';\nimport { getWords } from './services/randomWordGenerator';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    }\n  }\n\n  async componentWillMount() {\n    console.log('App refreshing');\n    this.wordList = await getWords();\n    this.setState({\n      loading: false\n    })\n  }\n\n  render() {\n\n    const renderApp = () => {\n\n        console.log(`Wordlist in app: ${this.wordList}`);\n        \n        if(this.state.loading === true) {\n          return (\n            <CircularProgress />\n          )\n        }\n\n        return (\n          <Board masterWordList={this.wordList}/>\n        )\n    }\n\n    return (\n      <div>\n          {\n            renderApp()\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tileRow\":\"board_tileRow__1yOWJ\",\"boardTiles\":\"board_boardTiles__3JFxb\",\"board\":\"board_board__PF3JZ\",\"boardHeader\":\"board_boardHeader__f63no\"};"],"sourceRoot":""}