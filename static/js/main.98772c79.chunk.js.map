{"version":3,"sources":["components/loadingInfo/loadingInfo.module.css","components/tile/tile.module.css","components/spymasterButton/spymasterButton.module.css","components/scorecard/scorecard.module.css","components/gameform/gameform.module.css","components/tile/tile.js","components/spymasterButton/spymasterButton.js","components/scorecard/scorecard.js","components/gameform/gameform.js","services/wordsClient.js","services/gameLoader.js","components/loadingInfo/loadingInfo.js","components/board/board.js","App.js","serviceWorker.js","index.js","components/board/board.module.css"],"names":["module","exports","Tile","props","state","lastColor","styleVars","neutralCardColor","colorShown","toggleColor","bind","newProps","spymasterSelected","this","setState","color","sendColorChangeToBoard","greenCardColor","trackClick","className","styles","tileContainer","tile","style","backgroundColor","onClick","word","React","PureComponent","SpymasterButton","clicked","buttonClickedColorChange","spymasterButtonSelectedColor","spymasterButtonColor","spymasterButtonSelectedTextColor","spymasterButtonTextColor","button","getBackgroundColor","getTextColor","buttonText","Scorecard","scorecard","scorecardText","tilesRemaining","GameForm","isAlphabeticOrEmpty","value","test","inputBox","type","input","maxLength","onChange","e","target","gameIdChanged","gameId","superagent","require","getWords","a","words","get","set","response","body","nouns","verbs","adjectives","calcHashCode","str","split","reduce","b","charCodeAt","getWordsAtHashedIndexes","hashCode","wordList","wordListAtHashedIndexes","wordListCopy","Array","from","i","intFromBits","parseInt","intFromCircularBits","length","circularBitsLost","circularBitStr","j","concat","bitsAsInt","wordIndex","Math","abs","push","splice","getColorsAtHashedIndexes","colorList","blueFirst","createColorList","colorListAtHashedIndexes","colorIndex","generateBoardSetup","providedWordList","undefined","startingWord","randomWords","hashedWord","colors","LoadingInfo","loadingInfo","introText","headingText","CircularProgress","id","appLoadingSpinner","size","Component","Board","colorCounter","initColorCounter","loading","setColorCounters","showAllColors","updateScore","updateBoard","blueCardColor","redCardColor","yellowCardColor","endCardColor","masterWordList","boardSetup","newColorCounts","Object","assign","newId","blueCount","totalBlues","currentColor","redCount","TOTAL_PLAYER_CARDS","renderHeader","boardHeader","scoreboard","renderScoreboard","newGameId","board","indexCounter","boardTiles","tileRow","renderGametiles","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.98772c79.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingInfo\":\"loadingInfo_loadingInfo__2fRMN\",\"introText\":\"loadingInfo_introText__3y4LZ\",\"headingText\":\"loadingInfo_headingText__1QVV1\",\"appLoadingSpinner\":\"loadingInfo_appLoadingSpinner__3X0bb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tileContainer\":\"tile_tileContainer__32zlQ\",\"tile\":\"tile_tile__2O8iQ\",\"word\":\"tile_word__2ydKx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"spymasterButton_button__2AjQb\",\"buttonText\":\"spymasterButton_buttonText__1887W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scorecard\":\"scorecard_scorecard__3r-JK\",\"scorecardText\":\"scorecard_scorecardText__3C8Ga\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBox\":\"gameform_inputBox__1QSDc\",\"input\":\"gameform_input__qpxww\"};","import React from 'react';\nimport styles from './tile.module.css';\nimport styleVars from '../../styles/globalStyles.json';\n\nexport class Tile extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastColor: styleVars.neutralCardColor,\n            colorShown: styleVars.neutralCardColor\n        }\n        this.toggleColor = this.toggleColor.bind(this);\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.spymasterSelected !== this.props.spymasterSelected) {\n            if (newProps.spymasterSelected === true) {\n                this.setState({\n                    lastColor: styleVars.neutralCardColor,\n                    colorShown: this.props.color\n                });\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: styleVars.neutralCardColor\n                });\n            }\n        }\n    }\n\n    toggleColor() {\n        if(this.props.spymasterSelected) {\n            if(this.state.colorShown === styleVars.neutralCardColor) {\n                this.setState({\n                    lastColor: styleVars.neutralCardColor,\n                    colorShown: this.props.color\n                }, this.sendColorChangeToBoard);\n            } else if (this.state.colorShown === styleVars.greenCardColor) {\n                this.setState({\n                    lastColor: styleVars.greenCardColor,\n                    colorShown: styleVars.neutralCardColor\n                }, this.sendColorChangeToBoard);\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: styleVars.greenCardColor\n                }, this.sendColorChangeToBoard);\n            }\n        } else {\n            if(this.state.colorShown === styleVars.neutralCardColor) {\n                this.setState({\n                    lastColor: styleVars.neutralCardColor,\n                    colorShown: this.props.color\n                }, this.sendColorChangeToBoard);\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: styleVars.neutralCardColor\n                }, this.sendColorChangeToBoard);\n            }\n        }\n    }\n\n    sendColorChangeToBoard() {\n        if (!this.props.spymasterSelected) {\n            this.props.trackClick(this.state.lastColor, this.state.colorShown);\n        }\n    }\n\n    render() {\n        return(\n            <div className={styles.tileContainer}>\n                <div className={styles.tile} style={{backgroundColor: this.state.colorShown}} onClick={() => this.toggleColor()}>\n                    <div className={styles.word}>\n                        <span>{this.props.word}</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './spymasterButton.module.css';\nimport styleVars from '../../styles/globalStyles.json';\n\nexport class SpymasterButton extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            clicked: false\n        }\n        this.buttonClickedColorChange = this.buttonClickedColorChange.bind(this);\n    }\n\n    buttonClickedColorChange() {\n        this.setState({\n            clicked: !this.state.clicked\n        })\n    }\n\n    getBackgroundColor() {\n        return this.state.clicked === true ? styleVars.spymasterButtonSelectedColor : styleVars.spymasterButtonColor;\n    }\n\n    getTextColor() {\n        return this.state.clicked === true ? styleVars.spymasterButtonSelectedTextColor : styleVars.spymasterButtonTextColor;\n    }\n\n    render() {\n        return(\n            <div className={styles.button} style={{backgroundColor: this.getBackgroundColor(), color: this.getTextColor()}} onClick={() => { this.props.onClick(); this.buttonClickedColorChange(); }}>\n                <div className={styles.buttonText}>\n                    SpyMaster\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './scorecard.module.css';\n\nexport class Scorecard extends React.PureComponent {\n\n    render() {\n        return(\n            <div className={styles.scorecard} style={{backgroundColor: this.props.color}}>\n                <div className={styles.scorecardText}>\n                    {this.props.tilesRemaining}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './gameform.module.css';\n\nexport class GameForm extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.isAlphabeticOrEmpty = this.isAlphabeticOrEmpty.bind(this);\n    }\n\n    isAlphabeticOrEmpty(value) {\n        if (/^[a-zA-Z]+$/.test(value) || value === '') {\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        return(\n            <div className={styles.inputBox}>            \n                <input type=\"text\" className={styles.input} maxLength=\"15\" onChange={(e) => {\n                    if(this.isAlphabeticOrEmpty(e.target.value)) {\n                        this.props.gameIdChanged(e.target.value);\n                    }\n                }} value={this.props.gameId}/>\n            </div>\n        )\n    }\n}","const superagent = require('superagent');\n\nexport async function getWords() {\n\n    let words = [];\n\n    const response = await superagent\n        .get(\"https://scpnmwczha.execute-api.us-east-1.amazonaws.com/dev/words\")\n        .set(\"Content-Type\", \"application/json\")\n        .set(\"Accept\", \"application/json\")\n\n    const { nouns, verbs, adjectives } = response.body\n    words = [...nouns, ...verbs, ...adjectives]\n\n    return words;\n}","import { getWords } from './wordsClient';\nimport randomWords from 'random-words'\n\nexport function calcHashCode(str) {\n    return str.split(\"\").reduce((a, b) => {\n        a = ((a << 5) - a) + b.charCodeAt(0);\n        return a & a\n    }, 0);\n}\n\nexport function getWordsAtHashedIndexes(hashCode, wordList) {\n    const wordListAtHashedIndexes = [];\n    const fourteenBitStr = '11111111111111'\n    const bitsInInt = 32;\n    const wordListCopy = Array.from(wordList);\n\n    for(let i = 0; i < 25; i++) {\n        const intFromBits = parseInt(fourteenBitStr, 2) << i;\n        let intFromCircularBits = 0;\n        if (bitsInInt < fourteenBitStr.length + i) {\n            const circularBitsLost = fourteenBitStr.length + i - bitsInInt;\n            let circularBitStr = '';\n            for(let j = 0; j < circularBitsLost; j++) {\n                circularBitStr = circularBitStr.concat('1');\n            }\n            intFromCircularBits = parseInt(circularBitStr, 2);\n        }\n        const bitsAsInt = intFromBits + intFromCircularBits;\n        const wordIndex = Math.abs(hashCode & bitsAsInt) % wordListCopy.length;\n        wordListAtHashedIndexes.push(wordListCopy[wordIndex]);\n        wordListCopy.splice(wordIndex, 1);\n    }\n\n    return wordListAtHashedIndexes;\n}\n\nexport function getColorsAtHashedIndexes(hashCode) {\n    const colorList = createColorList(hashCode % 2 === 1);\n    const colorListAtHashedIndexes = [];\n    const fiveBitStr = '11111'\n\n    for(let i = 0; i < 25; i++) {\n        const intFromBits = parseInt(fiveBitStr, 2) << i;\n        const colorIndex = Math.abs(hashCode & intFromBits) % colorList.length;\n        colorListAtHashedIndexes.push(colorList[colorIndex])\n        colorList.splice(colorIndex, 1);\n    }\n\n    return colorListAtHashedIndexes\n}\n\nexport async function generateBoardSetup(gameId, providedWordList) {\n    let wordList = providedWordList;\n    if (providedWordList === undefined) {\n        wordList = await getWords();\n    }\n\n    let startingWord = gameId;\n    if (startingWord === undefined || startingWord === '') {\n        startingWord = randomWords();\n    }\n    const hashedWord = calcHashCode(startingWord);\n    return {\n        gameId: startingWord,\n        words: getWordsAtHashedIndexes(hashedWord, wordList),\n        colors: getColorsAtHashedIndexes(hashedWord)\n    };\n}\n\nexport function createColorList(blueFirst) {\n    let colorList = ['grey'];\n    for (let i = 0; i < 7; i++) {\n        colorList.push('#E8E889');\n    }\n    for (let i = 0; i < 8; i++) {\n        colorList.push('#83B1DE');\n        colorList.push('#F37472');\n    }\n    colorList.push(blueFirst ? '#83B1DE' : '#F37472');\n    return colorList;\n}","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport styles from './loadingInfo.module.css';\n\nexport class LoadingInfo extends React.Component {\n\n    render() {\n        return(\n            <div className={styles.loadingInfo}>\n              <h4 className={styles.introText}>{this.props.introText}</h4>\n              <h1 className={styles.headingText}>{this.props.headingText}</h1>\n              <CircularProgress id={styles.appLoadingSpinner} size=\"15%\" />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Tile } from '../tile/tile';\nimport { SpymasterButton } from '../spymasterButton/spymasterButton';\nimport styles from './board.module.css';\nimport { Scorecard } from '../scorecard/scorecard';\nimport { GameForm } from '../gameform/gameform';\nimport { generateBoardSetup } from '../../services/gameLoader';\nimport { LoadingInfo } from '../loadingInfo/loadingInfo';\nimport styleVars from '../../styles/globalStyles.json'\n\nexport class Board extends React.PureComponent {\n\n    static TOTAL_PLAYER_CARDS = 17;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            spymasterSelected: false,\n            colorCounter: this.initColorCounter(),\n            loading: true\n        };\n        this.initColorCounter = this.initColorCounter.bind(this);\n        this.setColorCounters = this.setColorCounters.bind(this);\n        this.showAllColors = this.showAllColors.bind(this);\n        this.updateScore = this.updateScore.bind(this);\n        this.updateBoard = this.updateBoard.bind(this);\n    }\n\n    initColorCounter() {\n        const colorCounter = {};\n        const { neutralCardColor, blueCardColor, redCardColor, yellowCardColor, endCardColor } = styleVars;\n        colorCounter[neutralCardColor] = 25;\n        colorCounter[blueCardColor]= 0;\n        colorCounter[redCardColor] = 0;\n        colorCounter[yellowCardColor] = 0;\n        colorCounter[endCardColor] = 0;\n        return colorCounter;\n    }\n\n    async componentWillMount() {\n        const boardSetup = await generateBoardSetup(undefined, this.props.masterWordList);\n        this.setState({\n            wordList: boardSetup.words,\n            colorList: boardSetup.colors,\n            gameId: boardSetup.gameId,\n        });\n        this.setColorCounters();\n        this.setState({\n            loading: false\n        })\n    }\n\n    showAllColors() {\n        this.setState({\n            spymasterSelected: !this.state.spymasterSelected,\n            colorCounter: this.initColorCounter()\n        })\n    }\n\n    updateScore(lastColor, colorShown) {\n        let newColorCounts = {};\n        Object.assign(newColorCounts, this.state.colorCounter);\n\n        if (lastColor !== undefined) {\n            newColorCounts[lastColor]--;\n        } else {\n            newColorCounts['white']--;\n        }\n        newColorCounts[colorShown]++;\n\n        this.setState({\n            colorCounter: newColorCounts\n        });\n    }\n\n    async updateBoard(newId) {\n        const boardSetup = await generateBoardSetup(newId, this.props.masterWordList);\n        this.setState({\n            wordList: boardSetup.words,\n            colorList: boardSetup.colors,\n            gameId: newId,\n            spymasterSelected: false\n        });\n        this.setColorCounters();\n    }\n\n    setColorCounters() {\n        this.blueCount = this.state.colorList.reduce((totalBlues, currentColor) => {\n            if (currentColor === styleVars[\"blueCardColor\"]) {\n                return ++totalBlues;\n            }\n            return totalBlues;\n        }, 0);\n        this.redCount = Board.TOTAL_PLAYER_CARDS - this.blueCount;\n    }\n\n    render() {\n        const renderScoreboard = () => {\n            if (!this.state.spymasterSelected === true) {\n                return (\n                    <div className={styles.scoreboard}>\n                        <Scorecard color={styleVars[\"blueCardColor\"]} tilesRemaining={this.blueCount - this.state.colorCounter[styleVars[\"blueCardColor\"]]}/>\n                        <Scorecard color={styleVars[\"redCardColor\"]} tilesRemaining={this.redCount - this.state.colorCounter[styleVars[\"redCardColor\"]]}/>\n                    </div>\n                )\n            }\n        }\n\n        const renderHeader = () => {\n            return (\n                <div className={styles.boardHeader}>\n                    {renderScoreboard()}\n                    <GameForm gameId={this.state.gameId} gameIdChanged={async (newGameId) => await this.updateBoard(newGameId)}/>\n                    <SpymasterButton onClick={() => this.showAllColors()}/>\n\n                </div>\n            )\n        }\n\n        const renderGametiles = () => {\n            let indexCounter = 0;\n            return (\n                    <div className={styles.boardTiles}>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                        <div className={styles.tileRow}>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                            <Tile spymasterSelected={this.state.spymasterSelected} word={this.state.wordList[indexCounter]} color={this.state.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                        </div>\n                    </div>\n            )\n        }\n\n        const renderBoard = () => {\n            return (\n                <div className={styles.board}>\n                    {renderHeader()}\n                    <hr></hr>\n                    {renderGametiles()}\n                </div>\n            )\n        }\n\n        if(this.state.loading) {\n            return <LoadingInfo introText=\"Loading Board\" headingText=\"Qodenames\"/>\n        } else {\n            return renderBoard()\n        }\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Board } from './components/board/board';\nimport { getWords } from './services/wordsClient';\nimport { LoadingInfo } from './components/loadingInfo/loadingInfo';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    }\n  }\n\n  async componentWillMount() {\n    this.wordList = await getWords();\n    this.setState({\n      loading: false\n    })\n  }\n\n  render() {\n    if(this.state.loading === true) {\n      return (\n        <LoadingInfo introText=\"Welcome To\" headingText=\"Qodenames\"/>\n      )\n    } else {\n      return (\n        <Board masterWordList={this.wordList}/>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"board_board__PF3JZ\",\"boardHeader\":\"board_boardHeader__f63no\",\"boardTiles\":\"board_boardTiles__3JFxb\",\"tileRow\":\"board_tileRow__1yOWJ\",\"scoreboard\":\"board_scoreboard__3G7tD\"};"],"sourceRoot":""}