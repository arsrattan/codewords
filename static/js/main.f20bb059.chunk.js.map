{"version":3,"sources":["components/board/board.module.css","components/tile/tile.module.css","components/button/button.module.css","components/scorecard/scorecard.module.css","components/tile/tile.js","components/button/button.js","components/scorecard/scorecard.js","components/board/board.js","App.js","services/randomWordGenerator.js","serviceWorker.js","index.js"],"names":["module","exports","Tile","props","state","lastColor","undefined","colorShown","toggleColor","bind","newProps","spymasterSelected","this","setState","color","sendColorChangeToBoard","trackClick","className","styles","tile","style","backgroundColor","onClick","word","React","Component","Button","clicked","hovering","buttonClickedColorChange","buttonHoverColorChange","button","getBackgroundColor","getTextColor","onMouseOver","onMouseLeave","buttonText","text","Scorecard","scorecard","scorecardText","tilesRemaining","Board","colorCounter","blueCount","colorList","reduce","total","currentColor","redCount","showAllColors","updateScore","newColorCounts","Object","assign","indexCounter","board","boardHeader","id","renderScoreboard","boardTiles","tileRow","wordList","words","keys","apple","definitions","partsOfSpeech","run","cat","walk","number","workout","oil","wait","time","climb","people","turn","car","close","turtle","play","model","grind","mouse","swim","dog","listen","music","watch","movie","colors","blueFirst","i","push","sort","Math","random","console","log","map","colorCode","createColorList","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f20bb059.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tileRow\":\"board_tileRow__1yOWJ\",\"boardTiles\":\"board_boardTiles__3JFxb\",\"board\":\"board_board__PF3JZ\",\"boardHeader\":\"board_boardHeader__f63no\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"tile_tile__2O8iQ\",\"word\":\"tile_word__2ydKx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__3_GL1\",\"buttonText\":\"button_buttonText__1CVKS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scorecard\":\"scorecard_scorecard__3r-JK\",\"scorecardText\":\"scorecard_scorecardText__3C8Ga\"};","import React from 'react';\nimport styles from './tile.module.css';\n\nexport class Tile extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastColor: undefined,\n            colorShown: 'white'\n        }\n        this.toggleColor = this.toggleColor.bind(this);\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.spymasterSelected !== this.props.spymasterSelected) {\n            if (newProps.spymasterSelected === true) {\n                this.setState({\n                    lastColor: 'white',\n                    colorShown: this.props.color\n                });\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: 'white'\n                });\n            }\n        }\n    }\n\n    toggleColor() {\n        if(this.props.spymasterSelected) {\n            if(this.state.colorShown === 'white') {\n                this.setState({\n                    lastColor: 'white',\n                    colorShown: this.props.color\n                }, this.sendColorChangeToBoard);\n            } else if (this.state.colorShown === '#52AB6E') {\n                this.setState({\n                    lastColor: '#52AB6E',\n                    colorShown: 'white'\n                }, this.sendColorChangeToBoard);\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: '#52AB6E'\n                }, this.sendColorChangeToBoard);\n            }\n        } else {\n            if(this.state.colorShown === 'white') {\n                this.setState({\n                    lastColor: 'white',\n                    colorShown: this.props.color\n                }, this.sendColorChangeToBoard);\n            } else {\n                this.setState({\n                    lastColor: this.props.color,\n                    colorShown: 'white'\n                }, this.sendColorChangeToBoard);\n            }\n        }\n    }\n\n    sendColorChangeToBoard() {\n        if (!this.props.spymasterSelected) {\n            this.props.trackClick(this.state.lastColor, this.state.colorShown);\n        }\n    }\n\n    render() {\n        return(\n            <div className={styles.tile} style={{backgroundColor: this.state.colorShown }} onClick={() => this.toggleColor()}>\n                <div className={styles.word}>\n                    {this.props.word}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './button.module.css';\n\nexport class Button extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            clicked: false,\n            hovering: false\n        }\n        this.buttonClickedColorChange = this.buttonClickedColorChange.bind(this);\n        this.buttonHoverColorChange = this.buttonHoverColorChange.bind(this);\n    }\n\n    buttonClickedColorChange() {\n        this.setState({\n            clicked: !this.state.clicked\n        })\n    }\n\n    buttonHoverColorChange() {\n        this.setState({\n            hovering: !this.state.hovering\n        })\n    }\n\n    getBackgroundColor() {\n        return this.state.clicked === true ? '#4f7567' : this.state.hovering ? 'grey' : 'white';\n    }\n\n    getTextColor() {\n        return (this.state.clicked === true || this.state.hovering === true) ? 'white' : 'black';\n    }\n\n    render() {\n        return(\n            <div className={styles.button} style={{backgroundColor: this.getBackgroundColor(), color: this.getTextColor()}} onClick={() => { this.props.onClick(); this.buttonClickedColorChange(); }} onMouseOver={() => this.buttonHoverColorChange()} onMouseLeave={() => this.buttonHoverColorChange()}>\n                <div className={styles.buttonText}>\n                    {this.props.text}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport styles from './scorecard.module.css';\n\nexport class Scorecard extends React.Component {\n\n    render() {\n        return(\n            <div className={styles.scorecard} style={{backgroundColor: this.props.color}}>\n                <div className={styles.scorecardText}>\n                    {this.props.tilesRemaining}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Tile } from '../tile/tile';\nimport { Button } from '../button/button';\nimport styles from './board.module.css';\nimport { Scorecard } from '../scorecard/scorecard';\n\nexport class Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            spymasterSelected: false,\n            colorCounter: {\n                'white': 25,\n                '#83B1DE': 0,\n                '#F37472': 0,\n                '#52AB6E': 0,\n                'E8E889': 0\n            }\n        };\n        this.blueCount = this.props.colorList.reduce((total, currentColor) => {\n            if (currentColor === '#83B1DE') {\n                return total+1;\n            }\n            return total;\n        }, 0);\n        this.redCount = 17 - this.blueCount;\n        this.showAllColors = this.showAllColors.bind(this);\n        this.updateScore = this.updateScore.bind(this);\n    }\n\n    showAllColors() {\n        this.setState({\n            spymasterSelected: !this.state.spymasterSelected,\n            colorCounter: {\n                'white': 25,\n                '#83B1DE': 0,\n                '#F37472': 0,\n                '#52AB6E': 0,\n                'E8E889': 0\n            }\n        })\n    }\n\n    updateScore(lastColor, colorShown) {\n        let newColorCounts = {};\n        Object.assign(newColorCounts, this.state.colorCounter);\n        if (lastColor !== undefined) {\n            newColorCounts['white']--;\n        }\n        newColorCounts[colorShown]++;\n\n        this.setState({\n            colorCounter: newColorCounts\n        });\n    }\n\n    render() {\n        let indexCounter = 0;\n\n        const renderScoreboard = () => {\n            if (this.state.spymasterSelected === true) {\n                return;\n            }\n            return (\n                <div>\n                    <Scorecard id='blueScorecard' color='#83B1DE' tilesRemaining={this.blueCount - this.state.colorCounter['#83B1DE']}/>\n                    <Scorecard id='redScorecard' color='#F37472' tilesRemaining={this.redCount - this.state.colorCounter['#F37472']}/>\n                </div>\n            )\n        }\n\n        return(\n            <div className={styles.board}>\n            <div className={styles.boardHeader}>\n                {\n                    renderScoreboard()\n                }\n                <Button onClick={() => this.showAllColors()} text='SpyMaster'/>\n            </div>\n            <div className={styles.boardTiles}>\n                <div className={styles.tileRow}>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                </div>\n                <div className={styles.tileRow}>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                </div>\n                <div className={styles.tileRow}>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                </div>\n                <div className={styles.tileRow}>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                </div>\n                <div className={styles.tileRow}>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                    <Tile spymasterSelected={this.state.spymasterSelected} word={this.props.wordList[indexCounter]} color={this.props.colorList[indexCounter++]} trackClick={(lastColor, colorShown) => this.updateScore(lastColor, colorShown)}/>\n                </div>\n            </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Board } from './components/board/board';\nimport generateRandomWords, {\n    createColorList\n} from './services/randomWordGenerator';\n\n\nconst words = Object.keys(generateRandomWords());\nconst colors = createColorList(Math.random() >= 0.5);\n\nfunction App() {\n  return (\n    <div>\n        <Board colorList={colors} wordList={words}/>\n    </div>\n  );\n}\n\nexport default App;\n","export default function generateRandomWords() {\n    const randomWordJson = {\n        apple: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        run: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        cat: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        walk: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        number: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        workout: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        oil: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        wait: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        time: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        climb: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        people: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        turn: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        car: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        close: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        turtle: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        play: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        model: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        grind: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        mouse: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        swim: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        dog: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        listen: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        music: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        },\n        watch: {\n            definitions: [],\n            partsOfSpeech: ['Verb']\n        },\n        movie: {\n            definitions: [],\n            partsOfSpeech: ['Noun']\n        }\n    }\n    \n    return randomWordJson;\n}\n\nexport function createColorList(blueFirst) {\n    let colorList = ['grey'];\n    for (let i = 0; i < 7; i++) {\n        colorList.push('#E8E889');\n    }\n    for (let i = 0; i < 8; i++) {\n        colorList.push('#83B1DE');\n        colorList.push('#F37472');\n    }\n    colorList.push(blueFirst ? '#83B1DE' : '#F37472');\n    colorList.sort(() => Math.random() - 0.5); // Shuffle list\n    console.log(`Colorlist: ${colorList.map(colorCode => colorCode === '#83B1DE' ? 'blue' : colorCode === '#F37472' ? 'red' : colorCode === '#E8E889' ? 'yellow' : 'grey')}`);\n    return colorList;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}